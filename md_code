import MDAnalysis as mda
import numpy as np
import matplotlib.pyplot as plt

# Load PSF and DCD files
u = mda.Universe('data-p.psf', 'eq-1.dcd', format="LAMMPS")

# Select atoms named 'NIT'
ag = u.select_atoms('resname NIT')

# Calculate center of mass of selected atoms 
center_of_mass = ag.center_of_mass()

# Set parameters
max_distance = 40  
num = 40  # Number radii considered

# Initialize dictionary for counting occurrences in each bin
distance_counts = {i: 0 for i in range(1, num + 1)}
bin_centers = np.arange(0, num + 1)
counts = np.zeros(num+1)

# Loop through each frame 
for ts in u.trajectory:
    for atom in ag:
        # Calculate distance from center of mass along Z-axis
        distance = np.sqrt(np.sum((atom.position - center_of_mass)**2))
        if distance <= max_distance:
            bin_index = int(distance / max_distance * num) + 1  # Calculate bin index
            if bin_index in bin_centers:
                counts[bin_index] += 1
                continue;

print(distance)
print(bin_centers[1:6])

# Calculate volumes of spherical shells (hollow spheres)
outer_volumes = (4/3) * np.pi * (bin_centers ** 3)
inner_volumes = (4/3) * np.pi * ((bin_centers - 1) ** 3)
volumes = outer_volumes - inner_volumes

# Calculate densities
densities = counts / volumes
print(counts[1:6])
print(densities[1:6])

# Plot the radial density profile along Z-axis
plt.figure(figsize=(8, 6))
plt.plot(bin_centers, densities, linestyle='-')

plt.xlabel('Distance Bin')
plt.ylabel('Number Density (number of atoms per cubic Angstrom)')
plt.title('Number Density Profile along Radius')
plt.grid(True)
plt.tight_layout()
plt.show()

# Determine maximum observed density
max_density = np.max(densities)

# Set threshold density as 0.02
threshold_density = 0.02 * max_density  # 2% of maximum density

# Find distances where densities drop below threshold
threshold_distances = []
for bin_index, density in zip(bin_centers, densities):
    if density < threshold_density:
        threshold_distances.append(bin_index)

if threshold_distances:
    print(f"The radius is approximately {threshold_distances[0]:.6f} Angstroms.")
else:
    print("No distances found below the threshold density.")
