import MDAnalysis as mda    #import MDAnalysis imported as mda
import numpy as np
import matplotlib.pyplot as plt

# Load PSF and DCD files
#create a Universe
u = mda.Universe('data-p.psf', 'eq-1.dcd', format="LAMMPS")

# Select atoms named 'NIT'
ag = u.select_atoms('resname NIT')
#print(len(ag))

# Calculate center of mass of selected atoms 
center_of_mass = ag.center_of_mass()

# Set parameters
max_distance = 40  
bins = 100
counts = np.zeros(bins)

# Loop through each frame 
for ts in u.trajectory:
    #print(len(ag))
    for atom in ag:
        # Check if atom's Z-coordinate is greater than center of mass's Z-coordinate
        if atom.position[2] > center_of_mass[2]:
                # Calculate distance from center of mass along Z-axis
                distance = atom.position[2] - center_of_mass[2]
                if distance <= max_distance:
                    if distance != 0: 
                        bin_edges = np.histogram_bin_edges(distance, bins, range=[1,max_distance])
                        bin_centers = (bin_edges[1:] + bin_edges[:-1]) / 2
                        bin_index = np.searchsorted(bin_edges, distance, side='left') - 1 #searching to find the index where distance fits in the bin_edge
                        counts[bin_index] += 1
        # Calculate density in each bin
        volumes = (4/3)*np.pi * ((bin_centers)**3)
        #bin_volumes = (4/3)*np.pi * ((bin_edges[1:] - bin_edges[:-1])**3)
        densities = counts/volumes    

# Plot the radial density profile along Z-axis
plt.figure(figsize=(8, 6))
plt.plot(bin_centers, densities, linestyle='-')

plt.xlabel('Distance (Angstroms)')
plt.ylabel('Number Density (number of atoms per cubic Angstrom)')
plt.title('Number Density Profile along Radius')
plt.grid(True)
plt.tight_layout()
plt.show()

# Determine maximum observed density
original_density = np.max(densities)

# Set threshold density as 0.02
threshold_density = 2.86*(10e-9)* original_density  # 2% of original density

# Find the Z coordinate where density drops below threshold
z_coordinate = None
for i, density in enumerate(densities):
    if density < threshold_density:
        z_coordinate = bin_centers[i]
        break

print(bin_centers[0])
print(bin_index[0])
print(volumes[0]) 
print(counts[0])
print(densities[0])

if z_coordinate is not None:
    print(f"The radius is approximately {z_coordinate:.6f} Angstroms.")
